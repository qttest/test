class Driver {     loader();     //loop     scheduler();     dispatcher();     CPU();     waitforinterrupt();     //endloop;  } loader {    while (not end-of-programdata-file) do {     Read-File();     Extract program attributes into the PCB     Insert hex-code into simulated Disk  } scheduler {}dispatcher {}memory {}Effective-Address {        //direct addressing:         EA = C(base-reg)+ D; // D is the 16-bit offset or displacement         //indirect addressing:         EA = C(base-reg) + C(I-reg) + D; } Fetch(memory[map(PC)]){// fetch instruction at RAM address – mapped PC } Decode(w, oc, addrptr){ // part of decoding of the instruction in w }  Execute(oc) { }CPU {}DMA {    //loop     switch(type) {     case 0: Read(ch, next(p_rec), buf[next_io]);     case 1: Write(ch, next(p_rec), buf[next_io]);     }     next_io := next_io + 4; // assuming 1 word of 4 bytes at a time     end; //loop     signal(ComputeOnly) // signal the main CPU to use the channel/bus } ComputeOnly {//This method implements a simple instruction cycle algorithm with dynamic relocation of the program (relative to the base-register).     loop         w : = Fetch(memory[map(PC)]);// fetch instruction at RAM address – mapped PC         Decode(w, oc, addrptr); // part of decoding of the instruction in w         PC := PC + 1; // getting ready for next instruction         Execute(oc) {             case 0: // corresponding code using addrptr of operands             case 1: // corresponding code or send interrupt         }     end; // loop } //The CPU is supported by a PCB, which may have the following (suggested) structure: typedef struct PCB {     cpuid: // information the assigned CPU (for multiprocessor system)     struct state: // record of environment that is saved on interrupt         // including the pc, registers, permissions, buffers, caches, active         // pages/blocks      code-size;      struct registers: // accumulators, index, general      struct sched: // burst-time, priority, queue-type, time-slice, remain-time      struct accounts: // cpu-time, time-limit, time-delays, start/end times, io-times      struct memories: // page-table-base, pages, page-size      // base-registers – logical/physical map, limit-reg      struct progeny: // child-procid, child-code-pointers      parent: ptr; // pointer to parent (if this process is spawned, else ‘null’)      struct resources: // file-pointers, io-devices – unitclass, unit#, open-file-tables      status; // {running, ready, blocked, new}      status_info: // pointer to ‘ready-list of active processes’ or      // ‘resource-list on blocked processes’      priority: integer; // of the process } //Queues and other code //Need – queues (new, ready, block-on-io, suspend) //Need – conversion routines or use built-in calls between hex, decimal, binary types in Java. 
